@startuml

class Client {
+ main()
}

class Project {
- components : Component[]
+ Project(String name, Component parent)

+ getChildren()
+ addChild(Component child)
+ removeChild(Component child)
+ acceptVisitor(Visitor v)
+ computeDuration()
}

class Task {
- intervals : Interval[]
+ Task(String name, Component parent)
+ playTask()
+ pauseTask()
+ acceptVisitor(Visitor v)
+ computeDuration()
}

class Component {
- name : String
- parent : Component
- duration : Duration
- startTime : LocalDateTime
- endTime : LocalDateTime

+ Component(String name, Component parent)
+ getName()
+ getParent()
+ getDuration()

+ setStartTime()
+ setDuration()
+ setEndTime()

+ acceptVisitor()
+ computeDuration()
+ endComponent()
+ toString()
}

class Interval {
- startTime : LocalDateTime
- endTime : LocalDateTime
- duration : Duration
- task : Task

+ Interval(Task t)
+ endInterval()
+ getDuration()
+ update(Observable o, Object arg)

}

Interface Visitor {
+ visitTask()
+ visitProject()
}


package java.util <<Folder>> {
    Interface Observer{
    + update()
    }

    abstract class Observable {
    - Observer: Observers[]
    + addObserver()
    + deleteObserver()
    + notifyObserver()
    }
}

class Clock {
- tick : Long
- timerTask : TimerTask
- timer : Timer
- uniqueInstance : Clock
- Clock()
+ getInstance()
- tick()
}

class Printer {
+ visitTask()
+ visitProject()
}

Client o-down->"n" Component
Project -up-|> Component
Component "n"<-down-o Project
Task -up-|> Component
Task -[hidden]right- Project
Interval "n" -right-* Task
Clock --|> Observable
Printer -up-|> Visitor
Interval -up-|> Observer
Observable *-->"n" Observer
Visitor -[hidden]left- Observable

@enduml